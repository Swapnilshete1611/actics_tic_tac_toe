{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helper.js","index.js"],"names":["Square","value","onClick","style","className","Board","squares","map","square","i","key","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","xO","display","justifyContent","alignItems","historyPoint","slice","current","_step","move","destination","step","alert","window","location","reload","ReactDom","render","document","getElementById"],"mappings":"+MAEA,IAUeA,EAVA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACjBC,EAAQF,EAAK,kBAAcA,GAAd,UAEnB,OACE,4BAAQG,UAAWD,EAAOD,QAASA,GAChCD,ICIQI,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASJ,EAAZ,EAAYA,QAAZ,OACZ,yBAAKE,UAAU,SACZE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAGR,MAAOO,EAAQN,QAAS,kBAAMA,EAAQO,WC2J7CE,EA3EF,WAAO,IAAD,EACaC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADrC,mBACVC,EADU,KACDC,EADC,OAEmBJ,mBAAS,GAF5B,mBAEVK,EAFU,KAEEC,EAFF,OAGaN,oBAAS,GAHtB,mBAGVO,EAHU,KAGDC,EAHC,KAIXC,EC1FD,SAAyBf,GAW9B,IAVA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,CAAC,IAAD,cACnBa,EAAMb,GADa,GAC9Be,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACpE,OAAOpB,EAAQkB,GAGnB,OAAO,KDyEQG,CAAgBZ,EAAQE,IACjCW,EAAKT,EAAU,IAAM,IAyC3B,OACE,oCACA,yBAAMhB,MAAO,CACP0B,QAAS,OACTC,eAAgB,SAChBC,WAAY,WACjB,4CAEC,kBAAC,EAAD,CAAOzB,QAASS,EAAQE,GAAaf,QA/CrB,SAACO,GACnB,IAAMuB,EAAejB,EAAQkB,MAAM,EAAGhB,EAAa,GAC7CiB,EAAUF,EAAaf,GACvBX,EAAO,YAAO4B,GAEhBb,GAAUf,EAAQG,KAEtBH,EAAQG,GAAKmB,EACbZ,EAAW,GAAD,mBAAKgB,GAAL,CAAmB1B,KAC7BY,EAAcc,EAAaT,QAC3BH,GAAYD,OAsCV,yBAAKf,UAAU,gBACb,6BACE,uCA/BNW,EAAQR,KAAI,SAAC4B,EAAOC,GAElB,GAAGA,EAAK,GAAKA,GAAM,EAAE,CACrB,IAAMC,EAAcD,EAAI,sBAAkBA,GAAS,cACnD,OACE,wBAAI1B,IAAK0B,GACP,4BAAQlC,QAAS,kBAXvBgB,EADcoB,EAYsBF,QAVpChB,EAAWkB,EAAO,IAAM,GAFX,IAACA,IAY8BD,IAMvChB,IACDkB,MAAM,uBAAD,OAAwBlB,EAAxB,oBAAiDmB,OAAOC,SAASC,cAqBtE,4BAAKrB,EAAS,WAAQkB,MAAM,uBAAD,OAAwBlB,EAAxB,oBAAiDmB,OAAOC,SAASC,UAAY,MAExG,4BAAKrB,EAAS,WAAaA,EAAS,gBAAkBO,GAGlD,6BAAK,4BAAQ1B,QAAS,kBAAMsC,OAAOC,SAASC,WAAvC,kBElJjBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.67aafe51.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ value, onClick }) => {\r\n  const style = value ? `squares ${value}` : `squares`;\r\n\r\n  return (\r\n    <button className={style} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n  <div className=\"board\">\r\n    {squares.map((square, i) => (\r\n      <Square key={i} value={square} onClick={() => onClick(i)} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Board;\r\n","// import React, { useState } from \"react\";\r\n// import { calculateWinner } from \"../helper\";\r\n// import Board from \"./Board\";\r\n\r\n// const Game = () => {\r\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\r\n//   const [stepNumber, setStepNumber] = useState(0);\r\n//   const [xIsNext, setXisNext] = useState(true);\r\n//   const winner = calculateWinner(history[stepNumber]);\r\n//   const xO = xIsNext ? \"X\" : \"O\";\r\n\r\n//   const handleClick = (i) => {\r\n//     const historyPoint = history.slice(0, stepNumber + 1);\r\n//     const current = historyPoint[stepNumber];\r\n//     const squares = [...current];\r\n//     // return if won or occupied\r\n//     if (winner || squares[i]) return;\r\n//     // select square\r\n//     squares[i] = xO;\r\n//     setHistory([...historyPoint, squares]);\r\n//     setStepNumber(historyPoint.length);\r\n//     setXisNext(!xIsNext);\r\n//   };\r\n\r\n//   const jumpTo = (step) => {\r\n//     setStepNumber(step);\r\n//     setXisNext(step % 2 === 0);\r\n//   };\r\n\r\n//   const renderMoves = () => {\r\n//     history.map((_step, move) => {\r\n\r\n//       if(move>0 && move<=5){\r\n//       const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n//       return (\r\n//         <li key={move}>\r\n//           <button onClick={() => jumpTo(move)}>{destination}</button>\r\n//         </li>\r\n//       );\r\n\r\n//       }\r\n//     });\r\n//     if(winner){\r\n//       alert(`Congratulations.. ! ${winner} won the Game !`);window.location.reload();\r\n//     }\r\n//   }\r\n    \r\n//   // window.addEventListener(\"beforeunload\", (ev) => \r\n//   // {  \r\n//   //     ev.preventDefault();\r\n//   //     return ev.returnValue = 'Are you sure you want to close?';\r\n//   // });\r\n\r\n//   return (\r\n//     <>\r\n//      <h1>        Tic Tac Toe          </h1>\r\n//       <Board squares={history[stepNumber]} onClick={handleClick} />\r\n//       <div className=\"info-wrapper\">\r\n//         <div>\r\n//           <h3>History</h3>\r\n//           {renderMoves()}\r\n//         </div>\r\n//         <h3></h3>\r\n        \r\n//         <h3>{winner ? \"Winner: \" + winner : \"Next Player: \" + xO}</h3>\r\n        \r\n//             {/* alert(`Ta da ! ${winner} won the Game !`) */}\r\n//             <div><button onClick={() => window.location.reload()}>Clear Game</button></div>       \r\n          \r\n          \r\n          \r\n//       </div>\r\n//     </>\r\n//   );\r\n\r\n  \r\n// };\r\n\r\n// export default Game;\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { calculateWinner } from \"../helper\";\r\nimport Board from \"./Board\";\r\n\r\nconst Game = () => {\r\n  const [history, setHistory] = useState([Array(9).fill(null)]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const winner = calculateWinner(history[stepNumber]);\r\n  const xO = xIsNext ? \"X\" : \"O\";\r\n\r\n  const handleClick = (i) => {\r\n    const historyPoint = history.slice(0, stepNumber + 1);\r\n    const current = historyPoint[stepNumber];\r\n    const squares = [...current];\r\n    // return if won or occupied\r\n    if (winner || squares[i]) return;\r\n    // select square\r\n    squares[i] = xO;\r\n    setHistory([...historyPoint, squares]);\r\n    setStepNumber(historyPoint.length);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXisNext(step % 2 === 0);\r\n  };\r\n\r\n  const renderMoves = () =>\r\n    history.map((_step, move) => {\r\n\r\n      if(move>0 && move<=5){\r\n      const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{destination}</button>\r\n        </li>\r\n      );\r\n\r\n      }\r\n\r\n      if(winner){\r\n        alert(`Congratulations.. ! ${winner} won the Game !`);window.location.reload();\r\n      }\r\n\r\n    });\r\n\r\n    \r\n\r\n  return (\r\n    <>\r\n    <div  style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"   }}>\r\n     <h1>Tic Tac Toe</h1>\r\n     </div>\r\n      <Board squares={history[stepNumber]} onClick={handleClick} />\r\n      <div className=\"info-wrapper\">\r\n        <div>\r\n          <h3>History</h3>\r\n          {renderMoves()}\r\n        </div>\r\n        <h3>{winner ? () => { alert(`Congratulations.. ! ${winner} won the Game !`);window.location.reload()} : null}</h3>\r\n        \r\n        <h3>{winner ? \"Winner: \" + winner : \"Next Player: \" + xO}</h3>\r\n        \r\n            {/* alert(`Ta da ! ${winner} won the Game !`) */}\r\n            <div><button onClick={() => window.location.reload()}>Clear Game</button></div>       \r\n          \r\n          \r\n      </div>\r\n    </>\r\n  );\r\n\r\n  \r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n// Tushar Done","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Game from \"./components/Game\";\r\n\r\nReactDom.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}